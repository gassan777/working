In this video, we say in general terms exactly why the solution that is trees plus descriptive markup works so well. First clarification, these models, both the relational model and the tree model, have two parts, and this is often overlooked and it's important in understanding why they work so well. The heart of the relational model can be understood as a combination of the relational data structure mathematical relations with attributes for data values. And similarly, the tree model, as it is typically implemented, combines the tree data structure, again like relations mathematical data structure, with descriptive markup node labels or in XML terminology, generic identifiers such as stanza. So going forward, we're going to now refer to tree model as the tree/DM for descriptive markup model. We don't have to do the same sort of thing for the relational model because all of us have a common understanding of the relational model, in the sense of database model, where it includes attributes. Okay, drum roll. Can we say, in general, why the tree/DM model works so well, why it succeeds so well in meeting data management challenges? We can. No surprise there. It works in exactly the same way that the relational model works, abstraction, indirection. Say exactly the same way, but what I really mean is exactly the same way, only a little different, but nevertheless abstraction and indirection. Okay abstraction. Both of these models focus on the data itself separate from storage and processing. In one case, we have the explicit identification of data attributes, and in the other case, we have the explicit identification of logical text objects. And it's this abstraction focusing on the things themselves that brings enormous new functionality and efficiency. And of course, where you have abstraction, you have the opportunity for interaction, and never miss a chance to take that opportunity. So both of these models support an indirect relationship to storage and processing. Interestingly, in practice, the emphasis is often different. The emphasis between storage processing for the relational model we're abstracting away from storage typically, and for the tree/DM model we're abstracting away from processing. Ordinarily, you saw that. In both cases though, the separation is mediated by a mapping but a little different sort of mapping. In the case of the relational model where we map the logical schema to the physical schema, and in the case of the tree/DM model where mapping text components or rather types of text components to processing instructions. Okay, this is short video. I wanted to drive home the importance once again of abstraction and indirection to make it clear how abstraction and indirection work in the tree/DM model and how, for the most part, we see mostly similarities in how abstraction and indirection work for the tree/DM model and how abstraction and indirection work for the relational model. But I am going to take this opportunity to make a clarification that comes naturally now and will come up again later. And that's some distinguishing between the formal understanding of these data models and our colloquial understanding as practitioners. This is an important distinction that is not typically recognized. In the relational model, we typically think of attributes as representing dyadic properties or relationships in the real world. But technically, they are simply names for domains of values. So the English name that you see at the head of a column may be very familiar to you, it may be your Social Security Number or marital partner or something like that. You know what that means, and you think of that name as referring to that property or relationship. That's not part of the model. In the model, they are names, and they are names that are paired with domains of values, that are mapped to domains of values. That's a fairly thin relationship. But we actually have the same situation with the tree/DM model. In the tree/DM model, we think of node labels as indicating the kind of enclosed text object such as stanza or formula or footnote, paragraph and so on. But in the model, those labels are simply strings, names. There is no account in the model that connects them up with any meaning. Same goes for attributes in the relational model. There is nothing in the relational model that connects up the attributes which are names, that is to say strings, with anything meaningful except for a domain of values. So as c-o-l-o-r is a string, it can be a name for a set of color values but it doesn't carry the meaning, color. So it's actually our colloquial understanding of these models or more specifically of the attributes and labels in these models that enables us to actually use them to secure useful abstraction data management. If we saw c-o-l-o-r as simply a string or p-a-r-a abbreviation for paragraph, as simply a string, we would not be able to use models. We will not be able to use a relational model or a tree/DM model to get anything done to store data, to analyze data. So interesting situation here, it's our non-formal colloquial understanding of these data models that enable us to actually use them and very little is said about that, but we will see, in the next week actually in particular, that this difference between the formal and the colloquial, has motivated a further advance in abstraction and on a further course to ontologies. That's it for this video and as you can guess by now, I never pass up an opportunity to emphasize the fundamental importance of abstraction and indirection and data curation. See you later.