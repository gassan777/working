OK, welcome back. This is Workflow and Provenance week, this is video of three on workflow systems. So as I said last time, you can roll your own and have a organized, respectable, well-documented, modular, reliable workflow system. You can also use existing workflow support environments. So here is from Tim Phillips a list of the essential functions of a scientific work system. Let's take a look. So first, a good scientific work workflow systems should automate programs and services that scientists are using, automate them. Second, schedule. It should be able to schedule invocations of programs and services correctly and efficiently and, where possible, in parallel. Why is that when it's a transformation that can be performed with parallel processes? Good workflow system should manage data flow to and from between programs and services, should enable scientists, not just developers, to author and modify workflows. What, you think it will put you out of work? I think so. Should predict what a workflow will do when executed and that's prospective provenance. Very important. It should record what happened during workflow execution that's, retrospective provenance. Next thing, number seven. Very important. It should reveal and query programs. You should be able to determine how the workflow products were derived from the inputs via programs and services. Workflows are very complicated. You're not going to be studying by scripts and templates and documentation. Workflow systems need to provide an interface that allows you to query, the workflow query, the provenance. Number eight, organize intermediate and final data products as desired by users. Number nine, enable scientists to version, important, share and publish the workflows. Really important to advancing efficient science, not like there's more money and more available staff. We need to be able to share workflows, create new versions, publish them, and of course, empower scientists who wish to automate additional programs and services themselves and perhaps in the languages they know. Nobody wants to learn yet another, nobody in the mature period in their career wants to learn more languages. I mean, I should say nobody. And in this slide, we see I think this is Bertram Ludascher's characterization of objectives for scientific workflows, a more general slightly different kind of characterization and has an acronym ASAP, Automation Scaling Abstraction Provenance. So automation workflow systems automate the computational aspects of science. Scaling, they should be, where possible, able to make use of parallel resources, parallel computation resources. They should be able to handle large data sets because that's where we are these days. Abstraction of workflow systems should be easy to use, reuse, evolve and share and, of course, that's always enabled by abstraction indirection as we know from the earlier sessions in this course. And finally and of course, provenance workflow systems should capture processing history and data lineage, I haven't used that word yet, but I think you can see why it's applicable here, the lineage of the data where that data came from step by step. It has to be traceable. The workflow itself has to be able to evolve and all these things together and particularly the last should enable reproducible science. So the next few slides are visual representations of workflows in workflow support environments. I'm actually not going to talk through them. You can take a look yourself. I'll mention what environments they are. So the first is Kepler, very well-known pioneering research, actually a pioneering research data management environment. Can't do better. And the science here, motif detection in large sequence sets. Another example, again with Kepler. Okay, I realized that the systems that we're looking at work but you could serve up such as Kepler, Taverna are big, kind of complicated in themselves, may seem that you're not sure that a small shop or a shop under a lot of time pressure may be doubtful as to whether the adoption effort will be worth it. You will be the first to worry about that. I'd say it probably is worth it, but if you're not sure, there's a lot you can do if you're rolling your own to make your own workflows as organized, as useful, as valuable as possible, and that includes using tools that are designed to complement the sort of the natural software methods and interventions that you're using anyway compliment those and produce a more organized workflow system without the full investment. So, slide we're looking at here also from Bertram reminds us that we're all writing scripts, and those scripts are workflows. They control workflow, they document workflow, they look like a reasonable place for a lighter engagement with specifying workflows. And of course, an engagement that doesn't require you to learn new languages or adopt new languages that are an approach that's tied tightly to the things you're already doing. On this slide, as you can see, the different programming and statistics languages that are being used right now are represented in terms of their number of users. And you're probably using R, you're probably using Python, you're certainly using R, you're certainly using a SQL, you're certainly using other tools like that, in which you really want is something that complements those. And YesWorkflow, developed by Bertram and some colleagues, is a technique for documenting TeX scripts in a fashion that will allow those scripts to be more effective in specifying in a computationally accessible useful way workflows. And among other things, they will generate visualizations, and that's what you see going on here. You got a script, you have YesWorkflow documentation in the script, and as a result, we are among other things able to generate a really handy visualization. Okay. In this slide, a quick glance at the two principal sources of standards in the provenance world, W3C and PROV, and I recommend you surf those up. Okay. So you might not install a workflow management system, you might not even use YesWorkflow, but at least remember this. Don't just sit there at the command line typing instruction after instruction after instruction that after they've done their job are gone forever. Write a script, document it, use the script, and document that. It's not that hard, and it's really valuable as I suspect. Or saying same set of points much more vividly, automate like you're going to live forever and document like you're going to die tomorrow. That's from Michael Sperberg-McQueen and I believe he's echoing Gandhi. And that's it for workflow and provenance, see you soon.